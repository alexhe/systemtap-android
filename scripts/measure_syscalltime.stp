#! /usr/bin/stap

global count_syscalls_subset
global total_time_subset
global local_entry_time_subset[8192]

function psyscall_entry()
{
	local_entry_time_subset[tid()] = cputime_to_msecs(task_stime())
}

function psyscall_end()
{
	total_time_subset = total_time_subset + (cputime_to_msecs(task_stime()) - local_entry_time_subset[tid()])
	count_syscalls_subset++

	delete local_entry_time_subset[tid()]
}

probe begin
{
	count_syscalls_subset = 0
}

probe end
{
	printf("Our systemcalls:\n----------------\n");
	printf("syscalls:%d,total time:%d ms\n\n",count_syscalls_subset,total_time_subset);
}

probe syscall.open* 
{
	psyscall_entry()
}

probe syscall.open*.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.creat 
{
	psyscall_entry()
}

probe syscall.creat.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.close 
{
	psyscall_entry()
}

probe syscall.close.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.write 
{
	psyscall_entry()
}

probe syscall.write.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.read 
{
	psyscall_entry()
}

probe syscall.read.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.pwrite* 
{
	psyscall_entry()
}

probe syscall.pwrite*.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.pread* 
{
	psyscall_entry()
}

probe syscall.pread*.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.lseek 
{
	psyscall_entry()
}

probe syscall.lseek.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.llseek 
{
	psyscall_entry()
}

probe syscall.llseek.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.unlink 
{
	psyscall_entry()
}

probe syscall.unlink.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.fork 
{
	psyscall_entry()
}

probe syscall.fork.return 
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}

probe syscall.vfork ?
{
	psyscall_entry()
}

probe syscall.vfork.return ?
{
	if (!local_entry_time_subset[tid()]) next
	psyscall_end()
}
